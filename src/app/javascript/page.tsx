/** @format */
"use client";

import { useState } from "react";
import Link from "next/link";

const commands = [
  {
    section: "üß± –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã",
    items: [
      {
        cmd: "let x = 5;",
        descr: "–û–±—ä—è–≤–∏—Ç—å –∏–∑–º–µ–Ω—è–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.",
      },
      {
        cmd: "const name = 'Vlad';",
        descr: "–û–±—ä—è–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞).",
      },
      {
        cmd: "typeof x",
        descr: "–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.",
      },
      {
        cmd: "let a = 1, b = '2', c = true;",
        descr: "–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.",
      },
    ],
  },
  {
    section: "üì¶ –§—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
    items: [
      {
        cmd: "function sum(a, b) { return a + b; }",
        descr: "–û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.",
      },
      {
        cmd: "const sum = (a, b) => a + b;",
        descr: "–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.",
      },
      {
        cmd: "(() => { ... })();",
        descr: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è (IIFE).",
      },
      {
        cmd: "const greet = name => `Hi, ${name}`;",
        descr: "–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.",
      },
    ],
  },
  {
    section: "üîÑ –£—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã",
    items: [
      {
        cmd: "if (x > 0) { ... } else { ... }",
        descr: "–û–±—ã—á–Ω—ã–π if/else.",
      },
      {
        cmd: "for (let i = 0; i < 5; i++) { ... }",
        descr: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for-—Ü–∏–∫–ª.",
      },
      {
        cmd: "while (—É—Å–ª–æ–≤–∏–µ) { ... }",
        descr: "–¶–∏–∫–ª while.",
      },
      {
        cmd: "arr.forEach(item => { ... });",
        descr: "–ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ forEach.",
      },
      {
        cmd: "arr.map(x => x * 2);",
        descr: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –ø—Ä–∏–º–µ–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.",
      },
      {
        cmd: "for (const key in obj) { ... }",
        descr: "–ü–µ—Ä–µ–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞.",
      },
      {
        cmd: "for (const val of arr) { ... }",
        descr: "–ü–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–∞.",
      },
    ],
  },
  {
    section: "üìö –ú–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã",
    items: [
      {
        cmd: "const arr = [1, 2, 3];",
        descr: "–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤.",
      },
      {
        cmd: "arr.push(4);",
        descr: "–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü.",
      },
      {
        cmd: "arr.pop();",
        descr: "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.",
      },
      {
        cmd: "arr.shift(); arr.unshift(0);",
        descr: "–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π / –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ.",
      },
      {
        cmd: "arr.includes(2);",
        descr: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è.",
      },
      {
        cmd: "arr.filter(x => x > 1);",
        descr: "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.",
      },
      {
        cmd: "const obj = { a: 1, b: 2 };",
        descr: "–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç.",
      },
      {
        cmd: "Object.keys(obj);",
        descr: "–ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤.",
      },
      {
        cmd: "Object.values(obj);",
        descr: "–ó–Ω–∞—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤.",
      },
      {
        cmd: "Object.entries(obj);",
        descr: "–ü–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.",
      },
      {
        cmd: "const { a, b } = obj;",
        descr: "–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞.",
      },
      {
        cmd: "const [x, y] = arr;",
        descr: "–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞.",
      },
    ],
  },
  {
    section: "üåü –°—Ç—Ä–æ–∫–∏ –∏ —à–∞–±–ª–æ–Ω—ã",
    items: [
      {
        cmd: "const msg = 'Hi' + name;",
        descr: "–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫.",
      },
      {
        cmd: "const msg = `Hi, ${name}!`;",
        descr: "–®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (template literals).",
      },
      {
        cmd: "str.length",
        descr: "–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏.",
      },
      {
        cmd: "str.toUpperCase()",
        descr: "–í –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.",
      },
      {
        cmd: "str.trim()",
        descr: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º.",
      },
      {
        cmd: "str.split(',')",
        descr: "–†–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤.",
      },
      {
        cmd: "str.replace('a', 'b')",
        descr: "–ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–∫—É.",
      },
      {
        cmd: "str.includes('foo')",
        descr: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏.",
      },
    ],
  },
  {
    section: "‚è≥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å",
    items: [
      {
        cmd: "setTimeout(() => {...}, 1000);",
        descr: "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.",
      },
      {
        cmd: "setInterval(() => {...}, 1000);",
        descr: "–í—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏.",
      },
      {
        cmd: "Promise.resolve(42).then(console.log);",
        descr: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–∏—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
      },
      {
        cmd: "async function f() { await ... }",
        descr: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å await.",
      },
      {
        cmd: "const res = await fetch(url);",
        descr: "–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É (–≤–Ω—É—Ç—Ä–∏ async-—Ñ—É–Ω–∫—Ü–∏–∏).",
      },
      {
        cmd: "try { ... } catch(e) { ... }",
        descr: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.",
      },
    ],
  },
  {
    section: "üí° –†–∞–∑–Ω–æ–µ –∏ —Ç—Ä—é–∫–∏",
    items: [
      {
        cmd: "[...arr1, ...arr2]",
        descr: "–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (spread) –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤.",
      },
      {
        cmd: "{ ...obj1, c: 3 }",
        descr: "Spread –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (–∫–æ–ø–∏—è + –Ω–æ–≤—ã–µ –ø–æ–ª—è).",
      },
      {
        cmd: "Math.max(...arr)",
        descr: "–ú–∞–∫—Å–∏–º—É–º –≤ –º–∞—Å—Å–∏–≤–µ.",
      },
      {
        cmd: "JSON.stringify(obj)",
        descr: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON.",
      },
      {
        cmd: "JSON.parse(json)",
        descr: "–°—Ç—Ä–æ–∫—É JSON –≤ –æ–±—ä–µ–∫—Ç.",
      },
      {
        cmd: "console.log('–ü—Ä–∏–≤–µ—Ç!')",
        descr: "–í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.",
      },
      {
        cmd: "Array.isArray(val)",
        descr: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –º–∞—Å—Å–∏–≤ –ª–∏ —ç—Ç–æ?",
      },
      {
        cmd: "typeof val === 'undefined'",
        descr: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined.",
      },
      {
        cmd: "!!val",
        descr: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ boolean.",
      },
    ],
  },
];

function CommandBlock({ cmd, descr }: { cmd: string; descr: string }) {
  const [copied, setCopied] = useState(false);

  const highlighted = cmd
    .replace(
      /`([^`]+)`/g,
      '<span class="text-yellow-400 font-semibold">`$1`</span>' // –¥–ª—è —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    )
    .replace(
      /(\.\.\.[a-zA-Z_][a-zA-Z0-9_]*)/g,
      '<span class="text-blue-500 font-semibold">$1</span>' // –¥–ª—è spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    )
    .replace(
      /([a-zA-Z_][a-zA-Z0-9_]*)(?=\()/g,
      '<span class="text-green-400">$1</span>' // —Ñ—É–Ω–∫—Ü–∏–∏
    )
    .replace(
      /<([^>]+)>/g,
      '<span class="text-blue-500 font-semibold">&lt;$1&gt;</span>'
    );

  return (
    <div className="flex flex-col gap-1 mb-4 group">
      <div className="flex items-center bg-gray-800 rounded-lg px-3 py-2">
        <code
          className="flex-1 text-green-300 text-base select-all break-all"
          dangerouslySetInnerHTML={{ __html: highlighted }}
        />
        <button
          className="ml-4 px-3 py-1 rounded bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium transition"
          onClick={() => {
            navigator.clipboard.writeText(cmd.replace(/;/g, "; ")); // —á–∏—Ç–∞–µ–º–µ–µ –≤ –±—É—Ñ–µ—Ä–µ
            setCopied(true);
            setTimeout(() => setCopied(false), 1500);
          }}
        >
          {copied ? "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!" : "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
        </button>
      </div>
      <div className="text-xs text-gray-500 pl-1">{descr}</div>
    </div>
  );
}

export default function JSCheatSheet() {
  return (
    <div className="bg-gray-100 min-h-screen py-8 px-3 md:px-0">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 flex items-center gap-2">
          üìí JavaScript: —à–ø–∞—Ä–≥–∞–ª–∫–∞
        </h1>
        {commands.map(({ section, items }) => (
          <section className="mb-8" key={section}>
            <h2 className="text-xl font-semibold mb-3">{section}</h2>
            {items.map(({ cmd, descr }) => (
              <CommandBlock key={cmd} cmd={cmd} descr={descr} />
            ))}
          </section>
        ))}
        <div className="mt-12 text-xs text-gray-400 text-center">
          <Link
            href="https://learn.javascript.ru/"
            target="_blank"
            className="underline hover:text-blue-500"
          >
            –£—á–µ–±–Ω–∏–∫: learn.javascript.ru
          </Link>
        </div>
      </div>
    </div>
  );
}
